(window.webpackJsonp=window.webpackJsonp||[]).push([[118],{502:function(e,t,n){"use strict";n.r(t);var i=n(29),s=Object(i.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("p",[e._v("-"),n("em",[e._v("- mode: Outline -")]),e._v("-")]),e._v(" "),n("p",[n("a",{attrs:{href:"https://travis-ci.org/libunwind/libunwind",target:"_blank",rel:"noopener noreferrer"}},[n("img",{attrs:{src:"https://travis-ci.org/libunwind/libunwind.svg?branch=master",alt:"Build Status"}})])]),e._v(" "),n("p",[e._v("This is version 1.3 of the unwind library.  This library supports\nseveral architecture/operating-system combinations:")]),e._v(" "),n("p",[e._v("Linux/x86-64:\tWorks well.\nLinux/x86:\tWorks well.\nLinux/ARM:\tWorks well.\nLinux/IA-64:\tWorks well.\nLinux/PARISC:\tWorks well, but C library missing unwind-info.\nHP-UX/IA-64:\tMostly works but known to have some serious limitations.\nMIPS:          Newly added.\nLinux/AArch64:\tWorks well.\nLinux/PPC64:\tNewly added.\nLinux/SuperH:\tNewly added.\nFreeBSD/i386:\tWorks well.\nFreeBSD/x86-64: Newly added (FreeBSD architecture is known as amd64).\nLinux/Tilegx:  Newly added (64-bit mode only).")]),e._v(" "),n("ul",[n("li",[e._v("General Build Instructions")])]),e._v(" "),n("p",[e._v("In general, this library can be built and installed with the following\ncommands:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("$ ./autogen.sh # Needed only for building from git. Depends on libtool.\n$ ./configure\n$ make\n$ make install prefix=PREFIX\n")])])]),n("p",[e._v("where PREFIX is the installation prefix.  By default, a prefix of\n/usr/local is used, such that libunwind.a is installed in\n/usr/local/lib and unwind.h is installed in /usr/local/include.  For\ntesting, you may want to use a prefix of /usr/local instead.")]),e._v(" "),n("ul",[n("li",[e._v("Building with Intel compiler")])]),e._v(" "),n("p",[e._v("** Version 8 and later")]),e._v(" "),n("p",[e._v('Starting with version 8, the preferred name for the IA-64 Intel\ncompiler is "icc" (same name as on x86).  Thus, the configure-line\nshould look like this:')]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v('$ ./configure CC=icc CFLAGS="-g -O3 -ip" CXX=icc CCAS=gcc CCASFLAGS=-g \\\n\tLDFLAGS="-L$PWD/src/.libs"\n')])])]),n("ul",[n("li",[e._v("Building on HP-UX")])]),e._v(" "),n("p",[e._v("For the time being, libunwind must be built with GCC on HP-UX.")]),e._v(" "),n("p",[e._v("libunwind should be configured and installed on HP-UX like this:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v('$ ./configure CFLAGS="-g -O2 -mlp64" CXXFLAGS="-g -O2 -mlp64"\n')])])]),n("p",[e._v("Caveat: Unwinding of 32-bit (ILP32) binaries is not supported\nat the moment.")]),e._v(" "),n("p",[e._v("** Workaround for older versions of GCC")]),e._v(" "),n("p",[e._v('GCC v3.0 and GCC v3.2 ship with a bad version of sys/types.h.  The\nworkaround is to issue the following commands before running\n"configure":')]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("$ mkdir $top_dir/include/sys\n$ cp /usr/include/sys/types.h $top_dir/include/sys\n")])])]),n("p",[e._v("GCC v3.3.2 or later have been fixed and do not require this\nworkaround.")]),e._v(" "),n("ul",[n("li",[e._v("Building for PowerPC64 / Linux")])]),e._v(" "),n("p",[e._v("For building for power64 you should use:")]),e._v(" "),n("p",[e._v('$ ./configure CFLAGS="-g -O2 -m64" CXXFLAGS="-g -O2 -m64"')]),e._v(" "),n("p",[e._v('If your power support altivec registers:\n$ ./configure CFLAGS="-g -O2 -m64 -maltivec" CXXFLAGS="-g -O2 -m64 -maltivec"')]),e._v(" "),n("p",[e._v("To check if your processor has support for vector registers (altivec):\ncat /proc/cpuinfo | grep altivec\nand should have something like this:\ncpu             : PPC970, altivec supported")]),e._v(" "),n("p",[e._v("If libunwind seems to not work (backtracing failing), try to compile\nit with -O0, without optimizations. There are some compiler problems\ndepending on the version of your gcc.")]),e._v(" "),n("ul",[n("li",[e._v("Building on FreeBSD")])]),e._v(" "),n("p",[e._v("General building instructions apply. To build and execute several tests,\nyou need libexecinfo library available in ports as devel/libexecinfo.")]),e._v(" "),n("p",[e._v("Development of the port was done of FreeBSD 8.0-STABLE. The library\nwas build with the system compiler that is modified version of gcc 4.2.1,\nas well as the gcc 4.4.3.")]),e._v(" "),n("ul",[n("li",[e._v("Regression Testing")])]),e._v(" "),n("p",[e._v("After building the library, you can run a set of regression tests with:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("$ make check\n")])])]),n("p",[e._v("** Expected results on IA-64 Linux")]),e._v(" "),n("p",[e._v("Unless you have a very recent C library and compiler installed, it is\ncurrently expected to have the following tests fail on IA-64 Linux:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("Gtest-init\t\t(should pass starting with glibc-2.3.x/gcc-3.4)\nLtest-init\t\t(should pass starting with glibc-2.3.x/gcc-3.4)\ntest-ptrace\t\t(should pass starting with glibc-2.3.x/gcc-3.4)\nrun-ia64-test-dyn1\t(should pass starting with glibc-2.3.x)\n")])])]),n("p",[e._v("This does not mean that libunwind cannot be used with older compilers\nor C libraries, it just means that for certain corner cases, unwinding\nwill fail.  Since they're corner cases, it is not likely for\napplications to trigger them.")]),e._v(" "),n("p",[e._v("Note: If you get lots of errors in Gia64-test-nat and Lia64-test-nat, it's\nalmost certainly a sign of an old assembler.  The GNU assembler used\nto encode previous-stack-pointer-relative offsets incorrectly.\nThis bug was fixed on 21-Sep-2004 so any later assembler will be\nfine.")]),e._v(" "),n("p",[e._v("** Expected results on x86 Linux")]),e._v(" "),n("p",[e._v("The following tests are expected to fail on x86 Linux:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("test-ptrace\n")])])]),n("p",[e._v("** Expected results on x86-64 Linux")]),e._v(" "),n("p",[e._v("The following tests are expected to fail on x86-64 Linux:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("run-ptrace-misc\t(see http://gcc.gnu.org/bugzilla/show_bug.cgi?id=18748\n\t\t and http://gcc.gnu.org/bugzilla/show_bug.cgi?id=18749)\n")])])]),n("p",[e._v("** Expected results on PARISC Linux")]),e._v(" "),n("p",[e._v("Caveat: GCC v3.4 or newer is needed on PA-RISC Linux.  Earlier\nversions of the compiler failed to generate the exception-handling\nprogram header (GNU_EH_FRAME) needed for unwinding.")]),e._v(" "),n("p",[e._v("The following tests are expected to fail on x86-64 Linux:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("Gtest-bt   (backtrace truncated at kill() due to lack of unwind-info)\nLtest-bt   (likewise)\nGtest-resume-sig  (Gresume.c:my_rt_sigreturn() is wrong somehow)\nLtest-resume-sig  (likewise)\nGtest-init (likewise)\nLtest-init (likewise)\nGtest-dyn1 (no dynamic unwind info support yet)\nLtest-dyn1 (no dynamic unwind info support yet)\ntest-setjmp\t\t(longjmp() not implemented yet)\nrun-check-namespace\t(toolchain doesn't support HIDDEN yet)\n")])])]),n("p",[e._v("** Expected results on HP-UX")]),e._v(" "),n("p",[e._v('"make check" is currently unsupported for HP-UX.  You can try to run\nit, but most tests will fail (and some may fail to terminate).  The\nonly test programs that are known to work at this time are:')]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v(" tests/bt\n tests/Gperf-simple\n tests/test-proc-info\n tests/test-static-link\n tests/Gtest-init\n tests/Ltest-init\n tests/Gtest-resume-sig\n tests/Ltest-resume-sig\n")])])]),n("p",[e._v("** Expected results on PPC64 Linux")]),e._v(" "),n("p",[e._v('"make check" should run with no more than 10 out of 24 tests failed.')]),e._v(" "),n("ul",[n("li",[e._v("Performance Testing")])]),e._v(" "),n("p",[e._v("This distribution includes a few simple performance tests which give\nsome idea of the basic cost of various libunwind operations.  After\nbuilding the library, you can run these tests with the following\ncommands:")]),e._v(" "),n("p",[e._v("$ cd tests\n$ make perf")]),e._v(" "),n("ul",[n("li",[e._v("Contacting the Developers")])]),e._v(" "),n("p",[e._v("Please direct all questions regarding this library to:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("libunwind-devel@nongnu.org\n")])])]),n("p",[e._v("You can do this by sending a mail to libunwind-request@nongnu.org with\na body of:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("subscribe libunwind-devel\n")])])]),n("p",[e._v("or you can subscribe and manage your subscription via the\nweb-interface at:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("https://savannah.nongnu.org/mail/?group=libunwind\n")])])]),n("p",[e._v("Or interact at the gihub page:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("https://github.com/libunwind/libunwind\n")])])])])}),[],!1,null,null,null);t.default=s.exports}}]);